---
import { getCollection, type CollectionEntry } from "astro:content";
import draftPostFilter from "@utils/draftPostFilter";
import "@styles/components/ChangeLog.scss";

interface ChangeLogEntry {
	file: string;
	compiledContent: () => Promise<string>;
	frontmatter: {
		title: string;
		date: string;
	};
}

interface ListItemData {
	depth: number;
	text: string;
}

const changeLogEntries = Object.values(
	import.meta.glob<ChangeLogEntry>("/src/content/changeLog/*.md", {
		eager: true,
	}),
);
const blogCollection = await getCollection("blog", draftPostFilter);
const projectCollection = await getCollection("project", draftPostFilter);
const magicProxiesCollection = await getCollection(
	"magicProxies",
	draftPostFilter,
);
const videoCollection = await getCollection("videos");

interface ListItemData {
	depth: number;
	text: string;
}

interface PostData {
	title: string;
	slug: string;
}

type PostsData = { [i: string]: PostData[] };

// create posts data from collection entries
function createPostsData(
	collection: CollectionEntry<
		"project" | "blog" | "videos" | "magicProxies"
	>[],
) {
	const postsData: PostsData = {};

	collection.forEach((entry) => {
		const date = entry.data.datePublished.getTime();

		// initialize posts array if not already initialized
		if (!postsData[date]) postsData[date] = [];

		const postData = { title: entry.data.title, slug: entry.slug };
		postsData[date].push(postData);
	});

	return postsData;
}

function addCollectionPosts(
	collection: CollectionEntry<
		"project" | "blog" | "videos" | "magicProxies"
	>[],
	label: string,
	linkUrlPrefix?: string,
) {
	const postsData = createPostsData(collection);
	addPostsDataToChangeLogContent(postsData, label, linkUrlPrefix);
}

function addPostsDataToChangeLogContent(
	postsData: PostsData,
	label: string,
	linkUrlPrefix?: string,
) {
	Object.keys(postsData).forEach((date) => {
		// initialize changeLogsLists array if not already initialized
		if (!changeLogsLists[date]) changeLogsLists[date] = [];

		const hasMultiplePosts = postsData[date].length > 1;

		// add sublist label
		if (hasMultiplePosts)
			changeLogsLists[date].push({ depth: 1, text: `Added ${label}s:` });

		const singlePostPrefix = hasMultiplePosts ? "" : `Added ${label}: `;

		postsData[date].forEach((post) => {
			const anchorStart = linkUrlPrefix
				? `<a href="/${linkUrlPrefix}/${post.slug}">`
				: "";
			const anchorEnd = linkUrlPrefix ? "</a>" : "";

			const depth = hasMultiplePosts ? 2 : 1;
			const text = `${singlePostPrefix}${anchorStart}${post.title}${anchorEnd}`;

			changeLogsLists[date].push({ depth, text });
		});
	});
}

const changeLogsLists: { [i: string]: ListItemData[] } = {};

const promises = changeLogEntries.map(async (entry) => {
	// use the entry file path to get the date key
	const dateString = entry.file.slice(-11).replace(".md", "");
	const datetime = new Date(dateString).getTime();

	const cleanedHtml: ListItemData[] = [];
	let depth = 0;

	const htmlLines = (await entry.compiledContent()).split("\n");
	htmlLines.forEach((line) => {
		// calculate the current list depth using "ul" HTML tags
		const curDepth =
			depth +
			(line.match("<ul>") || []).length -
			(line.match("</ul>") || []).length;
		depth += curDepth - depth;

		// remove list HTML tags
		const text = line
			.replaceAll("<ul>", "")
			.replaceAll("</ul>", "")
			.replaceAll("<li>", "")
			.replaceAll("</li>", "");
		if (!text) return;

		cleanedHtml.push({ depth, text });
	});

	return { datetime, cleanedHtml };
});

const results = await Promise.all(promises);

results.forEach((r) => {
	changeLogsLists[r.datetime] = r.cleanedHtml;
});

addCollectionPosts(blogCollection, "blog post", "posts");
addCollectionPosts(projectCollection, "project writeup", "projects");
addCollectionPosts(magicProxiesCollection, "magic proxie", "magic-proxies");
addCollectionPosts(videoCollection, "video");

const changeLogDateTimes = Object.keys(changeLogsLists).sort(
	(a, b) => parseInt(b) - parseInt(a),
);

// map through changeLogsLists to create raw HTML using the ListItemData
const changeLogDaysHtml = changeLogDateTimes.map((dateTime) => {
	const datetimeString = new Date(parseInt(dateTime)).toISOString();
	const dateString = new Date(parseInt(dateTime)).toLocaleDateString();

	const minDepth = Math.min(...changeLogsLists[dateTime].map((h) => h.depth));

	const liHtml = changeLogsLists[dateTime]
		.map((liData, i) => {
			// list item string
			let liStr = `<li>${liData.text}</li>`;
			const next = changeLogsLists[dateTime][i + 1];

			if (!next)
				return liStr + "</ul></li>".repeat(liData.depth - minDepth);

			// cur is the end of the current list
			if (liData.depth < next.depth)
				liStr += '<li class="sublist"><ul>'.repeat(
					next.depth - liData.depth,
				);

			// next is the start of a new list
			if (liData.depth > next.depth)
				liStr += "</ul></li>".repeat(liData.depth - next.depth);

			return liStr;
		})
		.join("");

	return `<time datetime="${datetimeString}">${dateString}</time><ul>${liHtml}</ul>`;
});
---

<section class="change-log" aria-labelledby="change-log-title">
	<strong id="change-log-title">Change Log</strong>
	<ul class="change-log__content">
		{
			changeLogDaysHtml.map((dayHtml) => (
				<li class="change-log__day" set:html={dayHtml} />
			))
		}
	</ul>
</section>
